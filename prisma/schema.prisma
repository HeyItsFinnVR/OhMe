// https://www.prisma.io/docs/orm/prisma-schema/overview/generators
// Define client for interacting with database with js
generator client {
    provider = "prisma-client-js"
}

// https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources
// Define database provider and url.
// This project uses a file based database,
// apposed to one hosted by a provider
datasource db {
    provider = "sqlite"
    url      = "file:./database.sqlite"
}


// https://www.prisma.io/docs/orm/prisma-schema/data-model/models
// "Models:
//  Represent the entities of your application domain
//  Map to the tables ... in your database
//  Form the foundation of the queries available in the generated Prisma Client API
//  ..."
// Define database "Models" (Tables)
model User {
    // Key
    id                String       @id @unique @default(uuid())

    // User information
    username          String       @unique   
    web3Wallet        String?     

    // Relations
    //   Use `emailAddress` as the foreign key so User entries can be filtered by email address
    emailAddress      String       @unique 
    email             Email        @relation(references: [address], fields: [emailAddress], onDelete: Restrict, onUpdate: Cascade)

    passwordId        String       @unique
    password          Password     @relation(references: [id], fields: [passwordId]) 

    sessions          Session[]    
}

model Email {
    // Key
    id            String       @id @unique @default(uuid())

    // Email information
    address       String       @unique
    verified      Boolean      @default(false)
    verifyCode    String?      @unique
    codeSentAt    DateTime?  

    // Relations
    user          User?     
}

model Password {
    // Key
    id            String       @id @unique @default(uuid())

    // Password information
    hash          String
    resetCode     String?      @unique 
    codeSentAt    DateTime?

    // Relations
    user              User?
}

model Session {
    // Key
    id           String      @id @unique @default(uuid())

    // Session information
    expiresAt    DateTime

    // Relations
    userId       String
    user         User        @relation(references: [id], fields: [userId], onDelete: Cascade)
}